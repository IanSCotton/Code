chessboard = [0] * 8   # these are the letters of the chessboard (x-direction)
i = 0
while i < 8:
    chessboard[i] = [0] * 8    # these are the numbers of the chessboard (y-direction)
    i = i + 1

knightx = 0
knighty = 0    # creates the knight at (A.8)

chessboard[knightx][knighty] = 1    # set the square the knight is on to already occupied

knightsequence = [0] * 66  # records the sequence of moves of the knight
k = 2    # move number
i = 0    # move in sequence
knightmovesx = [-2, -2, -1, -1, 1, 1, 2, 2]    # creates all of the possible knight moves
knightmovesy = [-1, 1, -2, 2, -2, 2, -1, 1]

while k < 65:    # loops for all of the knights moves

    while i < 8:
        if 0 <= knightx + knightmovesx[i] < 8 and 0 <= knighty + knightmovesy[i] < 8:    # checks move is on chessboard
            if chessboard[knightx + knightmovesx[i]][knighty + knightmovesy[i]] == 0:    # checks square is unoccupied
                chessboard[knightx + knightmovesx[i]][knighty + knightmovesy[i]] = k
                knightx = knightx + knightmovesx[i]    # moves the knight
                knighty = knighty + knightmovesy[i]
                knightsequence[k] = i
                i = 0    # resets move order
                k = k + 1    # moves onto the next mope
                break
        i = i + 1

    if i == 8:
        k = k - 1    # go to the previous move
        l = knightsequence[k]    # note last solution
        i = l + 1    # set i to last move so it tries a different move
        chessboard[knightx][knighty] = 0    # set the old square to 0
        knightx = knightx - knightmovesx[knightsequence[k]]
        knighty = knighty - knightmovesy[knightsequence[k]]


while i < 8:
    print(chessboard[i])    # prints the chessboard
    i = i + 1
